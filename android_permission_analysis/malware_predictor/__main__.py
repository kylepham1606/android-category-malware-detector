import argparse

from main.apk import APK  # from the apk-parse library

from android_permission_analysis.permission_analyzer.__main__ import load_existing_data

THRESHOLDS = {
    "default": 2.518856655,
    "books & reference": 1.75,
    "communication": 1.5,
    "entertainment": 1.2,
    "finance": 2.25,
    "games": 5.0,
    "music & audio": 0.85,
    "personalization": 1.375,
    "productivity": 1.4,
    "photography": 0.875,
    "tools": 0.9,
    "travel & local": 1.375,
    "video players & editors": 0.5,
}


def main(apk_file, category):
    print "#############################################################"
    print "#            Malware Predictor Based on Category            #"
    print "#############################################################"
    print

    permission_data = load_existing_data()
    standardized_category_name = category.lower()
    if standardized_category_name not in permission_data:
        raise ValueError("no category named {0}".format(category))

    threshold = THRESHOLDS.get(standardized_category_name, THRESHOLDS["default"])

    apk_interface = APK(apk_file)
    apk_permissions = [  # strip out "android.permission." prefix
        perm.split(".")[2] for perm in apk_interface.permissions if perm.startswith("android.permission")]

    print "APK File: {0}".format(apk_file)
    print "User-Provided Category: {0}".format(category)
    print "Package Name: {0}".format(apk_interface.package)
    print

    if len(apk_permissions) == 0:
        raise ValueError("no permissions in APK file")

    benign_apps_in_category = [
        app for app in permission_data[standardized_category_name]
        if app["virustotal_positives"] == 0
    ]

    malicious_apps_in_category = [
        app for app in permission_data[standardized_category_name]
        if app["virustotal_positives"] > 0
    ]

    malicious_likelihood_score = 0
    for permission in apk_permissions:
        benign_apps_with_permission = [
            app for app in benign_apps_in_category
            if permission in app["permissions"]
        ]

        malicious_apps_with_permission = [
            app for app in malicious_apps_in_category
            if permission in app["permissions"]
        ]

        benign_occurrence_proportion_to_print = (
                float(len(benign_apps_with_permission)) /
                float(len(benign_apps_in_category))
        )

        benign_occurrence_proportion_for_stats = (
                # Add 1 to avoid 0%.
                float(len(benign_apps_with_permission) + 1) /
                float(len(benign_apps_in_category) + 1)
        )

        malicious_occurrence_proportion = (
                float(len(malicious_apps_with_permission)) /
                float(len(malicious_apps_in_category))
        )

        malicious_likelihood_score += malicious_occurrence_proportion / benign_occurrence_proportion_for_stats

        print "Permission {0} occurs in {1}% of Malicious Apps and {2}% of Benign Apps".format(
            permission,
            str(round(malicious_occurrence_proportion * 100, 3)),
            str(round(benign_occurrence_proportion_to_print * 100, 3)))

    malicious_likelihood_score /= len(apk_permissions)  # proportional to number of permissions in APK

    print
    print "Malicious Likelihood Score: {0}".format(malicious_likelihood_score)

    if malicious_likelihood_score < threshold:
        print "Not Suspected to be Malware :)"
    else:
        print
        print "                                 .i;;;;i.                                  "
        print "                               iYcviii;vXY:                                "
        print "                             .YXi       .i1c.                              "
        print "                            .YC.     .    in7.                             "
        print "                           .vc.   ......   ;1c.                            "
        print "                           i7,   ..        .;1;                            "
        print "                          i7,   .. ...      .Y1i                           "
        print "                         ,7v     .6MMM@;     .YX,                          "
        print "                        .7;.   ..IMMMMMM1     :t7.                         "
        print "                       .;Y.     ;$MMMMMM9.     :tc.                        "
        print "                       vY.   .. .nMMM@MMU.      ;1v.                       "
        print "                      i7i   ...  .#MM@M@C. .....:71i                       "
        print "                     it:   ....   $MMM@9;.,i;;;i,;tti                      "
        print "                    :t7.  .....   0MMMWv.,iii:::,,;St.                     "
        print "                   .nC.   .....   IMMMQ..,::::::,.,czX.                    "
        print "                  .ct:   ....... .ZMMMI..,:::::::,,:76Y.                   "
        print "                  c2:   ......,i..Y$M@t..:::::::,,..inZY                   "
        print "                 vov   ......:ii..c$MBc..,,,,,,,,,,..iI9i                  "
        print "                i9Y   ......iii:..7@MA,..,,,,,,,,,....;AA:                 "
        print "               iIS.  ......:ii::..;@MI....,............;Ez.                "
        print "              .I9.  ......:i::::...8M1..................C0z.               "
        print "             .z9;  ......:i::::,.. .i:...................zWX.              "
        print "             vbv  ......,i::::,,.      ................. :AQY              "
        print "            c6Y.  .,...,::::,,..:t0@@QY. ................ :8bi             "
        print "           :6S. ..,,...,:::,,,..EMMMMMMI. ............... .;bZ,            "
        print "          :6o,  .,,,,..:::,,,..i#MMMMMM#v.................  YW2.           "
        print "         .n8i ..,,,,,,,::,,,,.. tMMMMM@C:.................. .1Wn           "
        print "         7Uc. .:::,,,,,::,,,,..   i1t;,..................... .UEi          "
        print "         7C...::::::::::::,,,,..        ....................  vSi.         "
        print "         ;1;...,,::::::,.........       ..................    Yz:          "
        print "          v97,.........                                     .voC.          "
        print "           izAotX7777777777777777777777777777777777777777Y7n92:            "
        print "             .;CoIIIIIUAA666666699999ZZZZZZZZZZZZZZZZZZZZ6ov.              "
        print

    return malicious_likelihood_score


if __name__ == "__main__":
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("apk_file", help="APK file path")
    arg_parser.add_argument("category", help="app category")
    args = arg_parser.parse_args()

    main(args.apk_file, args.category)
